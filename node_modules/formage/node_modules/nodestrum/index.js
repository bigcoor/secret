/**package 
{
  "name": "nodestrum",
  "description": "Some cross cutting utils",
  "version": "0.6.1",
  "author": {
    "name": "Refael Ackermann",
    "email": "refael@empeeric.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/Empeeric/nodestrum.git"
  },
  "bugs": {
    "url": "http://github.com/Empeeric/nodestrum/issues"
  },
  "license": "MIT",
  "readmeFilename": "README.md"
}
**/

'use strict';
if (!module.parent) {
    console.log('Please don\'t call me directly. I am just the main app\'s minion.');
    process.exit(1);
}
Error.stackTraceLimit = Infinity;

try {
    var express = module.parent.require('express');
} catch (e) {
    express = {
        logger: function () {}
    }
    express.logger.token = function () {};
    express.logger.format = function () {};
}
var util = require('util');
var domain = require('domain');


exports.isDebug = function (key) {return process.env.NODE_DEBUG && (~process.env.NODE_DEBUG.indexOf(key) || process.env.NODE_DEBUG[0] === '*');},
exports.logFor = function (key) {
    var logger = function () {arguments[0] = '\x1B[36m' + key + '\x1B[39m: ' + arguments[0]; console.log.apply(console, arguments)};
    logger.active = true;
    return exports.isDebug(key) ? logger : function () {};
};


/** @namespace mem_usage.rss */
/** @namespace mem_usage.heapUsed */
express['logger'].token('memory', function () {
    var mem_usage = process.memoryUsage();
    return util.format('%dMb %dMb', (mem_usage.rss / 1048576).toFixed(0), (mem_usage.heapUsed / 1048576).toFixed(0));
});
express['logger'].token('body', function (req) { return JSON.stringify(req.body || {}).slice(0, 200); });
express['logger'].format('log2', ':memory - :response-time ms - :res[content-length] :status ":method :url :body HTTP/:http-version"');


exports.catch_all_middleware = function catch_all_middleware(err, req, res, next) {
    // I have to do something with "next", otherwise I don't get "err"
    next = null;
    console.error(err.stack);
    res.send(500, '<pre>An unexpected error occurred! Please check logs.\n' + err.stack);
};


exports.domain_wrapper_middleware = function domain_wrapper_middleware(req, res, next) {
    var d = exports.domain_wrapper([req, res])
    d.run(next);
};

exports.domain_wrapper = function domain_wrapper(objs) {
    objs = objs || [];
    var d = domain.create();
    d.on('error', function (err) {
        var message = err.stack || err;
        util.error('#### domain exception ####\n', message, '\n#### end ####');
        try {
            var res = d.members.filter(function (o) {return o.constructor.name == 'ServerResponse';})[0];
            if (res._headerSent) return;
            res.json(500, {
                Status: -1,
                Message: message
            });
        } catch (e) {
            util.error('#### no sure if sent 500 ####')
        }
    });
    objs.forEach(d.add.bind(d))
    return d;
};


exports.register_process_catcher = function register_process_catcher() {
    process.on('uncaughtException', function (err) {
        util.error('---- process exception ----\n', err.stack || err, '\n---- end ----');
    });
};


exports.escapeHTMLComponent = global.escapeHTMLComponent = function (str) { return str == null ? '' : String(str).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;'); }
exports.encodeJSONHTML = global.encodeJSONHTML = function (str) { return escapeHTMLComponent(JSON.stringify(str)); }
exports.unescapeHTMLComponent = global.unescapeHTMLComponent = function (str) { return str == null ? '' : String(str).replace(/\&amp\;/gi, '&').replace(/\&lt\;/gi, '<').replace(/\&gt\;/gi, '>').replace(/\&quot\;/gi, '"').replace(/\&\#039\;/gi, "'"); }
exports.decodeJSONHTML = global.decodeJSONHTML = function (str) { return JSON.parse(unescapeHTMLComponent(str)); }